//=============================================================================
// Auxiliary library for Windows API (C++)
//                                                     Copyright (c) 2006 MAYO.
//=============================================================================
#pragma once

namespace wx {

//-----------------------------------------------------------------------------
//! @class	LineParser
//! @brief	テキストデータの行解析
//-----------------------------------------------------------------------------
class LineParser
{
public:
	//-------------------------------------------------------------------------
	//! @brief	コンストラクタ
	//-------------------------------------------------------------------------
	LineParser();

	//-------------------------------------------------------------------------
	//! @brief	デストラクタ
	//-------------------------------------------------------------------------
	~LineParser();

	//-------------------------------------------------------------------------
	//! @brief	文字列データをセット
	//!
	//! @param	data		セットする文字列
	//! @param	bytes		文字列のバイト数
	//!
	//! @retval	true		設定できた
	//! @retval	false		設定できなかった
	//-------------------------------------------------------------------------
	bool SetData(const wchar_t* data, UINT bytes = 0);

	//-------------------------------------------------------------------------
	//! @brief	保持している文字列データをクリア
	//-------------------------------------------------------------------------
	void Clear();

	//-------------------------------------------------------------------------
	//! @brief	まだ行があるか
	//!
	//! @retval	true		ある
	//! @retval	false		ない
	//-------------------------------------------------------------------------
	bool HasMoreLine() const;

	//-------------------------------------------------------------------------
	//! @brief	１行分の文字列を取得
	//!
	//! @param	trimming	トリミングするか
	//!
	//! @return	１行分の文字列
	//-------------------------------------------------------------------------
	const wchar_t* GetLine(bool trimming = false);

private:
	// コピーコンストラクタ、代入演算子を無効化
	LineParser             (const LineParser&);
	LineParser& operator = (const LineParser&);

private:
	wchar_t* m_text;
	wchar_t* m_next;
};


//-----------------------------------------------------------------------------
//! @class	TextReader
//! @brief	テキストファイル読み取り
//-----------------------------------------------------------------------------
class TextReader
{
public:
	//-------------------------------------------------------------------------
	//! @brief	コンストラクタ
	//-------------------------------------------------------------------------
	TextReader();

	//-------------------------------------------------------------------------
	//! @brief	デストラクタ
	//-------------------------------------------------------------------------
	~TextReader();

	//-------------------------------------------------------------------------
	//! @brief	ファイルを読み取り用に開く
	//!
	//! @param	path		ファイルパス
	//!
	//! @retval	true		開けた
	//! @retval	false		開けなかった
	//-------------------------------------------------------------------------
	bool Open(PCTSTR path);

	//-------------------------------------------------------------------------
	//! @brief	ファイルを閉じる
	//-------------------------------------------------------------------------
	void Close();

	//-------------------------------------------------------------------------
	//! @brief	まだデータがあるか
	//!
	//! @retval	true		ある
	//! @retval	false		ない
	//-------------------------------------------------------------------------
	bool HasMoreData() const;

	//-------------------------------------------------------------------------
	//! @brief	すべてのデータを取得
	//!
	//! @return	データ文字列へのポインタ
	//-------------------------------------------------------------------------
	const wchar_t* ReadAll() const;

	//-------------------------------------------------------------------------
	//! @brief	１行分のデータを取得
	//!
	//! @param	trimming	リミングするかどうか
	//!
	//! @return	１行分の文字列
	//-------------------------------------------------------------------------
	const wchar_t* ReadLine(bool trimming = false);

private:
	// コピーコンストラクタ、代入演算子を無効化
	TextReader             (const TextReader&);
	TextReader& operator = (const TextReader&);

private:
	LineParser	m_line;
	wchar_t*	m_text;
};


//-----------------------------------------------------------------------------
//! @class	TextWriter
//! @brief	テキストファイル書き込み
//-----------------------------------------------------------------------------
class TextWriter
{
public:
	//-------------------------------------------------------------------------
	//! @brief	コンストラクタ
	//-------------------------------------------------------------------------
	TextWriter();

	//-------------------------------------------------------------------------
	//! @brief	デストラクタ
	//-------------------------------------------------------------------------
	~TextWriter();

	//-------------------------------------------------------------------------
	//! @brief	ファイルを書き込み用に開く
	//!
	//! @param	path		ファイルパス
	//! @param	no_bom		BOMを書かない
	//!
	//! @retval	true		開けた
	//! @retval	false		開けなかった
	//-------------------------------------------------------------------------
	bool Open(PCTSTR path, bool no_bom = false);

	//-------------------------------------------------------------------------
	//! @brief	ファイルを閉じる
	//-------------------------------------------------------------------------
	void Close();

	//-------------------------------------------------------------------------
	//! @brief	指定文字列を書き込む
	//!
	//! @param	data		書き込む文字列
	//!
	//! @retval	true		書き込めた
	//! @retval	false		書き込めなかった
	//-------------------------------------------------------------------------
	bool Write(const wchar_t* data) const;

	//-------------------------------------------------------------------------
	//! @brief	指定文字列に改行をつけて書き込む
	//!
	//! @param	data		書き込む文字列
	//!
	//! @retval	true		書き込めた
	//! @retval	false		書き込めなかった
	//-------------------------------------------------------------------------
	bool WriteLine(const wchar_t* data) const;

	//-------------------------------------------------------------------------
	//! @brief	バイナリデータを書き込む
	//!
	//! @param	data		書き込むデータ
	//! @param	size		書き込むバイト数
	//!
	//! @retval	true		書き込めた
	//! @retval	false		書き込めなかった
	//-------------------------------------------------------------------------
	bool WriteBin(const void* data, DWORD size) const;

	//-------------------------------------------------------------------------
	//! @brief	整形した文字列を書き込む（最大1023文字）
	//!
	//! @param	fmt			書き込む文字列フォーマット
	//! @param	...			追加引数
	//!
	//! @retval	true		書き込めた
	//! @retval	false		書き込めなかった
	//-------------------------------------------------------------------------
	bool Print(const wchar_t* fmt, ...) const;

	//-------------------------------------------------------------------------
	//! @brief	整形した文字列を書き込む（最大1023文字）
	//!
	//! @param	fmt			書き込む文字列フォーマット
	//! @param	ap			引数リスト
	//!
	//! @retval	true		書き込めた
	//! @retval	false		書き込めなかった
	//-------------------------------------------------------------------------
	bool VPrint(const wchar_t* fmt, va_list ap) const;

private:
	// コピーコンストラクタ、代入演算子を無効化
	TextWriter             (const TextWriter&);
	TextWriter& operator = (const TextWriter&);

private:
	HANDLE m_file;
};

} //namespace wx
